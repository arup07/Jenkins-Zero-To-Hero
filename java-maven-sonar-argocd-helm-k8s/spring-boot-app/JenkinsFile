pipeline {
  agent none  // we define agent per stage
  stages {

    stage('Checkout') {
      agent { docker { image 'maven:3.9.9-eclipse-temurin-17'; args '--user root' } }
      steps {
        sh 'echo Checkout stage passed'
        checkout([$class: 'GitSCM', 
                  branches: [[name: 'main']], 
                  userRemoteConfigs: [[url: 'https://github.com/arup07/Jenkins-Zero-To-Hero']]])
      }
    }

    stage('Build and Test') {
      agent { docker { image 'maven:3.9.9-eclipse-temurin-17'; args '--user root' } }
      steps {
        sh 'ls -ltr'
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      agent { docker { image 'maven:3.9.9-eclipse-temurin-17'; args '--user root' } }
      environment {
        SONAR_URL = "http://18.139.223.229:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

    stage('Build and Push Docker Image') {
      agent any  // run on Jenkins host node with Docker installed
      environment {
        DOCKER_IMAGE = "arup07/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
            docker.image("${DOCKER_IMAGE}").push()
          }
        }
      }
    }

stage('Generate Deployment Manifest for Argo CD') {
  agent any
  environment {
    DOCKER_IMAGE_TAG = "${BUILD_NUMBER}"
  }
  steps {
    sh '''
      # Copy the template manifest to a temporary location
      TEMP_DIR=$(mktemp -d)
      cp jenkins-deployment-manifest/deployment.yml $TEMP_DIR/deployment.yml

      cd $TEMP_DIR

      # Replace placeholder with current build number
      sed -i "s#replaceImageTag#${DOCKER_IMAGE_TAG}#g" deployment.yml

      # Optional: apply to Kubernetes (if Argo CD is watching a cluster, you can skip this)
      # kubectl apply -f deployment.yml

      # Cleanup
      rm -rf $TEMP_DIR
    '''
  }
}


  } // stages
}
